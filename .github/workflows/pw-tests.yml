name: Playwright Tests
on:
 push:
   branches: [main, master]
 pull_request:
   branches: [main, master]

permissions:
 contents: read
 checks: write
 id-token: write

jobs:
 run-smoke-tests:
   timeout-minutes: 5
   runs-on: ubuntu-latest
   steps:
     - uses: actions/checkout@v4
     - uses: actions/setup-node@v4
       with:
         node-version: 18
         cache: "npm"
         registry-url: "https://npm.pkg.github.com"
     - name: Get installed Playwright version
       id: playwright-version    
       run: |
        PLAYWRIGHT_VERSION=$(node -e "const fs = require('fs'); const packageLock = JSON.parse(fs.readFileSync('./package-lock.json', 'utf8')); console.log(packageLock.packages[''].devDependencies['@playwright/test']);")
        echo "PLAYWRIGHT_VERSION=$PLAYWRIGHT_VERSION" >> $GITHUB_ENV
        echo $PLAYWRIGHT_VERSION
     - name: Cache node_modules
       uses: actions/cache@v4
       id: node-cache
       with: 
         path: |
           node_modules
         key: node_modules-${{ hashFiles('package-lock.json') }}
     - name: Cache playwright binaries
       uses: actions/cache@v4
       id: playwright-cache
       with:
        path: |
         ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}
     - name: Install dependencies
       if: steps.node-cache.outputs.cache-hit != 'true'
       run: npm ci
     - name: Install Playwright Browsers
       if: steps.playwright-cache.outputs.cache-hit != 'true'
       run: npx playwright install --with-deps
     - name: Run Playwright tests
       run: npm run test:smoke
     - name: Archive test results
       if: success() || failure()
       uses: actions/upload-artifact@v4
       with: 
        name: test-reports-smoke-tests
        path: |
         playwright-report/**/*.*
         test-results/**/*.
     - name: Publish smoke test report
       if: success() || failure()
       uses: mikepenz/action-junit-report@v4
       with: 
        report_paths: "./playwright-report/results.xml"
     - name: Save cache always
       id: save-playwright-cache
       if: always()
       uses: actions/cache/save@v4
       with:
        path: |
          ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}

 run-all-tests:
   needs: [run-smoke-tests]
   timeout-minutes: 5
   runs-on: ubuntu-latest
   steps:
     - uses: actions/checkout@v4
     - uses: actions/setup-node@v4
       with:
         node-version: 18
         cache: "npm"
         registry-url: "https://npm.pkg.github.com"
     - name: Get installed Playwright version
       id: playwright-version    
       run: |
        PLAYWRIGHT_VERSION=$(node -e "const fs = require('fs'); const packageLock = JSON.parse(fs.readFileSync('./package-lock.json', 'utf8')); console.log(packageLock.packages[''].devDependencies['@playwright/test']);")
        echo "PLAYWRIGHT_VERSION=$PLAYWRIGHT_VERSION" >> $GITHUB_ENV
        echo $PLAYWRIGHT_VERSION
     - name: Cache node_modules
       uses: actions/cache@v4
       id: node-cache
       with: 
         path: |
           node_modules
         key: node_modules-${{ hashFiles('package-lock.json') }}
     - name: Cache playwright binaries
       uses: actions/cache@v4
       id: playwright-cache
       with:
        path: |
         ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}
     - name: Install dependencies
       if: steps.node-cache.outputs.cache-hit != 'true'
       run: npm ci
     - name: Install Playwright Browsers
       if: steps.playwright-cache.outputs.cache-hit != 'true'
       run: npx playwright install --with-deps
     - name: Run Playwright tests
       run: npm run test:non:smoke
     - name: Archive test results
       if: success() || failure()
       uses: actions/upload-artifact@v4
       with: 
        name: test-reports-all-tests 
        path: |
         playwright-report/**/*.*
         test-results/**/*.
     - name: Publish all test report
       if: success() || failure()
       uses: mikepenz/action-junit-report@v4
       with: 
        report_paths: "./playwright-report/results.xml"
     - name: Save cache always
       id: save-playwright-cache
       if: always()
       uses: actions/cache/save@v4
       with:
        path: |
          ~/.cache/ms-playwright
        key: ${{ runner.os }}-playwright-${{ env.PLAYWRIGHT_VERSION }}
